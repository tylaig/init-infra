#!/bin/bash

# =============================================================================
# Script de Configura√ß√£o de Infraestrutura - Ubuntu 22.04
# Vers√£o: 2.7.1
# Otimizado para Ubuntu 22.04 LTS
# Suporte completo para par√¢metros CLI
# =============================================================================

# Cores para output
amarelo="\e[33m"
verde="\e[32m"
branco="\e[97m"
bege="\e[93m"
vermelho="\e[91m"
reset="\e[0m"

# =============================================================================
# Vari√°veis Globais para Par√¢metros CLI
# =============================================================================
AUTO_MODE="false"
SKIP_LICENSE="false"
QUIET_MODE="false"
RETURN_DATA="false"
CLEAN_INSTALL="false"
CLI_OPTION=""
CLI_PARAMS=()

# =============================================================================
# Fun√ß√µes de Ajuda e Vers√£o
# =============================================================================

show_help() {
    echo "Setup - Script de Configura√ß√£o de Infraestrutura"
    echo ""
    echo "USO:"
    echo "  bash <(curl -sSL https://raw.githubusercontent.com/tylaig/init-infra/main/Setup) [OP√á√ïES]"
    echo ""
    echo "OP√á√ïES GERAIS:"
    echo "  -h, --help              Mostra esta ajuda"
    echo "  -v, --version           Mostra a vers√£o do script"
    echo "  -a, --auto              Modo autom√°tico (aceita termos automaticamente)"
    echo "  -s, --skip-license       Pula aceita√ß√£o de termos"
    echo "  -q, --quiet              Modo silencioso (menos output)"
    echo "  -r, --return-data        Retorna dados da instala√ß√£o"
    echo "  -c, --clean-install      Remove Docker e depend√™ncias antes da instala√ß√£o"
    echo ""
    echo "OP√á√ïES DE APLICA√á√ÉO:"
    echo "  --menu N                 Instala aplica√ß√£o espec√≠fica (N = n√∫mero)"
    echo ""
    echo "PAR√ÇMETROS DE CONFIGURA√á√ÉO:"
    echo "  --domain DOMAIN          Dom√≠nio da aplica√ß√£o"
    echo "  --user USER              Usu√°rio da aplica√ß√£o"
    echo "  --password PASS          Senha da aplica√ß√£o"
    echo "  --server-name NAME       Nome do servidor"
    echo "  --network NETWORK         Rede (ex: 192.168.1.0/24)"
    echo "  --email EMAIL            Email de administra√ß√£o"
    echo "  --db-name DBNAME         Nome do banco de dados"
    echo "  --db-user DBUSER         Usu√°rio do banco de dados"
    echo "  --db-password DBPASS     Senha do banco de dados"
    echo "  --admin-email ADMIN_EMAIL Email do administrador"
    echo "  --admin-password ADMIN_PASS Senha do administrador"
    echo "  --bucket-name BUCKET     Nome do bucket (MinIO/S3)"
    echo "  --access-key ACCESS_KEY  Chave de acesso"
    echo "  --secret-key SECRET_KEY  Chave secreta"
    echo ""
    echo "EXEMPLOS:"
    echo "  # Instala√ß√£o autom√°tica do Portainer:"
    echo "  bash <(curl -sSL https://raw.githubusercontent.com/tylaig/init-infra/main/Setup) --auto --menu 1 --domain portainer.exemplo.com --user admin --password '@Senha123456_'"
    echo ""
    echo "  # Instala√ß√£o via SSH:"
    echo "  ssh root@servidor 'bash -s' < <(curl -sSL https://raw.githubusercontent.com/tylaig/init-infra/main/Setup) --auto --menu 1 --domain portainer.exemplo.com"
    echo ""
    echo "APLICA√á√ïES DISPON√çVEIS:"
    echo "  01 - Traefik + Portainer"
    echo "  02 - Chatwoot"
    echo "  03 - Evolution API (WhatsApp)"
    echo "  04 - Evolution API + Chatwoot"
    echo "  05 - Evolution API + Chatwoot + Botpress"
    echo "  06 - MinIO"
    echo "  07 - Typebot"
    echo "  08 - N8N"
    echo "  09 - Flowise"
    echo "  10 - PgAdmin"
    echo "  11 - Nocobase"
    echo "  12 - Botpress"
    echo "  13 - WordPress"
    echo "  14 - Baserow"
    echo "  15 - MongoDB"
    echo "  16 - Redis"
    echo "  17 - PostgreSQL"
    echo "  18 - MySQL"
    echo "  19 - MariaDB"
    echo "  20 - InfluxDB"
    echo "  21 - Grafana"
    echo "  22 - Prometheus"
    echo "  23 - Elasticsearch"
    echo "  24 - Kibana"
    echo "  25 - Logstash"
    echo "  26 - RabbitMQ"
    echo "  27 - Apache Kafka"
    echo "  28 - Zabbix"
    echo "  29 - Nagios"
    echo "  30 - OpenVPN"
    echo "  31 - WireGuard"
}

show_version() {
    echo "Setup - Script de Configura√ß√£o de Infraestrutura"
    echo "Vers√£o: 2.7.1"
    echo "Otimizado para Ubuntu 22.04 LTS"
    echo "Suporte completo para par√¢metros CLI"
    echo ""
    echo "Reposit√≥rio: https://github.com/tylaig/init-infra"
}

# =============================================================================
# Fun√ß√£o de Processamento de Argumentos CLI
# =============================================================================

process_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -a|--auto)
                AUTO_MODE="true"
                shift
                ;;
            -s|--skip-license)
                SKIP_LICENSE="true"
                shift
                ;;
            -q|--quiet)
                QUIET_MODE="true"
                shift
                ;;
            -r|--return-data)
                RETURN_DATA="true"
                shift
                ;;
            -c|--clean-install)
                CLEAN_INSTALL="true"
                shift
                ;;
            --menu)
                CLI_OPTION="$2"
                shift 2
                ;;
            --domain|--user|--password|--server-name|--network|--email|--db-name|--db-user|--db-password|--admin-email|--admin-password|--bucket-name|--access-key|--secret-key)
                CLI_PARAMS+=("$1" "$2")
                shift 2
                ;;
            *)
                echo "Erro: Par√¢metro desconhecido '$1'"
                echo "Use --help para ver as op√ß√µes dispon√≠veis"
                exit 1
                ;;
        esac
    done
}

# =============================================================================
# Fun√ß√£o para Definir Vari√°veis CLI
# =============================================================================

set_cli_variables() {
    for ((i=0; i<${#CLI_PARAMS[@]}; i+=2)); do
        case "${CLI_PARAMS[$i]}" in
            --domain)
                url_portainer="${CLI_PARAMS[$((i+1))]}"
                url_chatwoot="${CLI_PARAMS[$((i+1))]}"
                url_evolution="${CLI_PARAMS[$((i+1))]}"
                url_botpress="${CLI_PARAMS[$((i+1))]}"
                url_wordpress="${CLI_PARAMS[$((i+1))]}"
                ;;
            --user)
                user_portainer="${CLI_PARAMS[$((i+1))]}"
                user_chatwoot="${CLI_PARAMS[$((i+1))]}"
                user_flowise="${CLI_PARAMS[$((i+1))]}"
                user_PgAdmin_4="${CLI_PARAMS[$((i+1))]}"
                user_nocobase="${CLI_PARAMS[$((i+1))]}"
                ;;
            --password)
                pass_portainer="${CLI_PARAMS[$((i+1))]}"
                pass_chatwoot="${CLI_PARAMS[$((i+1))]}"
                pass_flowise="${CLI_PARAMS[$((i+1))]}"
                pass_PgAdmin_4="${CLI_PARAMS[$((i+1))]}"
                pass_nocobase="${CLI_PARAMS[$((i+1))]}"
                ;;
            --server-name)
                server_name="${CLI_PARAMS[$((i+1))]}"
                ;;
            --network)
                network="${CLI_PARAMS[$((i+1))]}"
                ;;
            --email)
                email_ssl="${CLI_PARAMS[$((i+1))]}"
                email_chatwoot="${CLI_PARAMS[$((i+1))]}"
                email_typebot="${CLI_PARAMS[$((i+1))]}"
                email_smtp_n8n="${CLI_PARAMS[$((i+1))]}"
                ;;
            --db-name)
                db_name="${CLI_PARAMS[$((i+1))]}"
                ;;
            --db-user)
                db_user="${CLI_PARAMS[$((i+1))]}"
                ;;
            --db-password)
                db_password="${CLI_PARAMS[$((i+1))]}"
                ;;
            --admin-email)
                admin_email="${CLI_PARAMS[$((i+1))]}"
                ;;
            --admin-password)
                admin_password="${CLI_PARAMS[$((i+1))]}"
                ;;
            --bucket-name)
                bucket_name="${CLI_PARAMS[$((i+1))]}"
                ;;
            --access-key)
                access_key="${CLI_PARAMS[$((i+1))]}"
                ;;
            --secret-key)
                secret_key="${CLI_PARAMS[$((i+1))]}"
                ;;
        esac
    done
}

# =============================================================================
# Fun√ß√£o de Limpeza Completa do Docker
# =============================================================================

clean_docker_complete() {
    echo "üßπ Iniciando limpeza completa do Docker..."
    echo ""
    
    # Para todos os containers
    echo "1/8 - Parando todos os containers..."
    docker stop $(docker ps -aq) 2>/dev/null || true
    
    # Remove todos os containers
    echo "2/8 - Removendo todos os containers..."
    docker rm $(docker ps -aq) 2>/dev/null || true
    
    # Remove todas as imagens
    echo "3/8 - Removendo todas as imagens Docker..."
    docker rmi $(docker images -q) 2>/dev/null || true
    
    # Remove todos os volumes
    echo "4/8 - Removendo todos os volumes..."
    docker volume rm $(docker volume ls -q) 2>/dev/null || true
    
    # Remove todas as redes customizadas
    echo "5/8 - Removendo redes customizadas..."
    docker network rm $(docker network ls -q) 2>/dev/null || true
    
    # Remove todos os stacks do Portainer
    echo "6/8 - Removendo stacks do Portainer..."
    docker stack rm $(docker stack ls --format "{{.Name}}" 2>/dev/null) 2>/dev/null || true
    
    # Para o servi√ßo Docker
    echo "7/8 - Parando servi√ßo Docker..."
    systemctl stop docker 2>/dev/null || true
    systemctl stop docker.socket 2>/dev/null || true
    systemctl stop containerd 2>/dev/null || true
    
    # Remove Docker e depend√™ncias
    echo "8/8 - Removendo Docker e depend√™ncias..."
    apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    apt-get purge -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 2>/dev/null || true
    
    # Remove diret√≥rios do Docker
    rm -rf /var/lib/docker 2>/dev/null || true
    rm -rf /var/lib/containerd 2>/dev/null || true
    rm -rf /etc/docker 2>/dev/null || true
    rm -rf /etc/containerd 2>/dev/null || true
    rm -rf /var/run/docker.sock 2>/dev/null || true
    rm -rf /var/run/containerd 2>/dev/null || true
    
    # Remove grupos Docker
    groupdel docker 2>/dev/null || true
    
    # Limpa cache do apt
    apt-get autoremove -y 2>/dev/null || true
    apt-get autoclean 2>/dev/null || true
    
    echo ""
    echo "‚úÖ Limpeza completa do Docker conclu√≠da!"
    echo "üîÑ Sistema pronto para nova instala√ß√£o limpa"
    echo ""
}

# =============================================================================
# Fun√ß√µes de Interface
# =============================================================================

nome_aviso(){

clear
echo ""
echo -e "$amarelo===================================================================================================$reset"
echo -e "$amarelo=                                                                                                 $amarelo=$reset"
echo -e "$amarelo=                     $branco  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                       $amarelo=$reset"
echo -e "$amarelo=                     $branco ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó                      $amarelo=$reset"
echo -e "$amarelo=                     $branco ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                      $amarelo=$reset"
echo -e "$amarelo=                     $branco ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                      $amarelo=$reset"
echo -e "$amarelo=                     $branco ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù                      $amarelo=$reset"
echo -e "$amarelo=                     $branco ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïù      ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                       $amarelo=$reset"
echo -e "$amarelo=                                                                                                 $amarelo=$reset"
echo -e "$amarelo===================================================================================================$reset"
echo ""
echo ""
}

nome_atualizando(){
    clear
    echo ""
    echo -e "$amarelo===================================================================================================$reset"
    echo -e "$amarelo=                                                                                                 $amarelo=$reset"
    echo -e "$amarelo=    $branco  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     $amarelo=$reset"
    echo -e "$amarelo=    $branco ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó    $amarelo=$reset"
    echo -e "$amarelo=    $branco ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    $amarelo=$reset"
    echo -e "$amarelo=    $branco ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    $amarelo=$reset"
    echo -e "$amarelo=    $branco ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    $amarelo=$reset"
    echo -e "$amarelo=    $branco ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù     $amarelo=$reset"
    echo -e "$amarelo=                                                                                                 $amarelo=$reset"
    echo -e "$amarelo===================================================================================================$reset"
    echo ""
    echo ""
}
nome_iniciando(){
    clear
    echo ""
    echo -e "$amarelo===================================================================================================$reset"
    echo -e "$amarelo=                                                                                                 $amarelo=$reset"
    echo -e "$amarelo=                  $branco ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                 $amarelo=$reset"
    echo -e "$amarelo=                  $branco ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó                $amarelo=$reset"
    echo -e "$amarelo=                  $branco ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                $amarelo=$reset"
    echo -e "$amarelo=                  $branco ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                $amarelo=$reset"
    echo -e "$amarelo=                  $branco ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù                $amarelo=$reset"
    echo -e "$amarelo=                  $branco ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                 $amarelo=$reset"
    echo -e "$amarelo=                                              v. 2.7.1                                           $amarelo=$reset"
    echo -e "$amarelo===================================================================================================$reset"
    echo ""
    echo ""
}

nome_verificando(){
    clear
    echo ""
    echo -e "$amarelo===================================================================================================$reset"
    echo -e "$amarelo=                                                                                                 $amarelo=$reset"
    echo -e "$amarelo=       $branco ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       $amarelo=$reset"
    echo -e "$amarelo=       $branco ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó      $amarelo=$reset"
    echo -e "$amarelo=       $branco ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë      $amarelo=$reset"
    echo -e "$amarelo=       $branco ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë      $amarelo=$reset"
    echo -e "$amarelo=       $branco  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù      $amarelo=$reset"
    echo -e "$amarelo=       $branco   ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù       $amarelo=$reset"
    echo -e "$amarelo=                                                                                                 $amarelo=$reset"
    echo -e "$amarelo===================================================================================================$reset"
    echo ""
    echo ""
}
# =============================================================================
# Fun√ß√µes Utilit√°rias
# =============================================================================

desc_ver(){
    echo -e "                            Este script √© otimizado para$amarelo Ubuntu 22.04 LTS$branco.$reset"
    echo -e "                            Compat√≠vel tamb√©m com$amarelo Ubuntu 20.04$branco e$amarelo Debian 11$branco.$reset"
    echo ""
}

# Fun√ß√£o para executar comandos com verifica√ß√£o de erro
executar_comando() {
    local comando="$1"
    local descricao="$2"
    local contador="$3"
    
    if eval "$comando" > /dev/null 2>&1; then
        echo "${contador}/12 - [ OK ] - ${descricao}"
    else
        echo "${contador}/12 - [ OFF ] - ${descricao}"
    fi
}

# =============================================================================
# Verifica√ß√µes Iniciais
# =============================================================================

clear
nome_verificando
echo "Aguarde enquanto verificamos algumas informa√ß√µes."
sleep 1

# Verifica se est√° usando Ubuntu 22.04, 20.04 ou Debian 11
if ! grep -q 'PRETTY_NAME="Ubuntu 22.04' /etc/os-release && ! grep -q 'PRETTY_NAME="Ubuntu 20.04' /etc/os-release && ! grep -q 'PRETTY_NAME="Debian GNU/Linux 11' /etc/os-release; then
    nome_aviso
    desc_ver
    sleep 5
    clear
    nome_verificando
fi

# Verifica se o usu√°rio √© root
if [ "$(id -u)" -ne 0 ]; then
    echo "Este script precisa ser executado como root. Executando sudo su..."
    sudo su
fi

# Verifica se o usu√°rio est√° no diret√≥rio /root/
if [ "$PWD" != "/root" ]; then
    echo "Mudando para o diret√≥rio /root/"
    cd /root || exit
fi

# =============================================================================
# Instala√ß√£o de Pacotes - Otimizado para Ubuntu 22.04
# =============================================================================

nome_iniciando 

# Lista de pacotes essenciais para Ubuntu 22.04
pacotes=(
    "apt update"
    "apt install -y software-properties-common"
    "apt install -y apt-transport-https"
    "apt install -y ca-certificates"
    "apt install -y curl"
    "apt install -y wget"
    "apt install -y gnupg"
    "apt install -y lsb-release"
    "apt install -y jq"
    "apt install -y git"
    "apt install -y python3"
    "apt install -y neofetch"
)

# Descri√ß√µes dos pacotes
descricoes=(
    "Atualizando lista de pacotes"
    "Instalando software-properties-common"
    "Instalando apt-transport-https"
    "Instalando ca-certificates"
    "Instalando curl"
    "Instalando wget"
    "Instalando gnupg"
    "Instalando lsb-release"
    "Instalando jq"
    "Instalando Git"
    "Instalando Python3"
    "Instalando neofetch"
)

# Instala os pacotes
for i in "${!pacotes[@]}"; do
    executar_comando "${pacotes[$i]}" "${descricoes[$i]}" "$((i+1))"
    echo ""
done

# =============================================================================
# Processamento de Argumentos CLI
# =============================================================================

# Processa todos os argumentos passados para o script
process_args "$@"

# Define as vari√°veis CLI
set_cli_variables

# =============================================================================
# Limpeza Completa do Docker (se solicitado)
# =============================================================================

if [[ "$CLEAN_INSTALL" == "true" ]]; then
    clean_docker_complete
fi

# =============================================================================
# Download e Execu√ß√£o do SetupMSAPP
# =============================================================================

# Verifica se o arquivo SetupMSAPP j√° existe e remove
if [ -e "SetupMSAPP" ]; then
    rm SetupMSAPP
fi

# Baixa o script SetupMSAPP
curl -sSL https://raw.githubusercontent.com/tylaig/init-infra/main/SetupMSAPP -o SetupMSAPP
if [ $? -eq 0 ]; then
    echo "Download conclu√≠do com sucesso!"
    chmod +x SetupMSAPP
    
    # Prepara os argumentos para passar ao SetupMSAPP
    SETUPMSAPP_ARGS=()
    
    # Adiciona argumentos de modo
    if [[ "$AUTO_MODE" == "true" ]]; then
        SETUPMSAPP_ARGS+=("--auto")
    fi
    
    if [[ "$SKIP_LICENSE" == "true" ]]; then
        SETUPMSAPP_ARGS+=("--skip-license")
    fi
    
    if [[ "$QUIET_MODE" == "true" ]]; then
        SETUPMSAPP_ARGS+=("--quiet")
    fi
    
    if [[ "$RETURN_DATA" == "true" ]]; then
        SETUPMSAPP_ARGS+=("--return-data")
    fi
    
    if [[ "$CLEAN_INSTALL" == "true" ]]; then
        SETUPMSAPP_ARGS+=("--clean-install")
    fi
    
    # Adiciona op√ß√£o de menu se especificada
    if [[ -n "$CLI_OPTION" ]]; then
        SETUPMSAPP_ARGS+=("--menu" "$CLI_OPTION")
    fi
    
    # Adiciona todos os par√¢metros CLI
    SETUPMSAPP_ARGS+=("${CLI_PARAMS[@]}")
    
    echo "Executando SetupMSAPP com par√¢metros..."
    echo "Argumentos: ${SETUPMSAPP_ARGS[*]}"
    
    # Executa o SetupMSAPP com todos os par√¢metros
    ./SetupMSAPP "${SETUPMSAPP_ARGS[@]}"
else
    echo "Erro: N√£o foi poss√≠vel baixar o SetupMSAPP"
    echo "Verifique sua conex√£o com a internet e tente novamente."
    sleep 5
fi

# =============================================================================
# Limpeza Final
# =============================================================================

# Atualiza o sistema uma √∫ltima vez
apt update > /dev/null 2>&1
apt upgrade -y > /dev/null 2>&1

# Remove o arquivo tempor√°rio
if [ -e "SetupMSAPP" ]; then
    rm SetupMSAPP
fi

clear
echo -e "${verde}Setup conclu√≠do com sucesso!${reset}"
echo -e "${amarelo}Sistema configurado e pronto para uso.${reset}"